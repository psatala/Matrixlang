
std::unique_ptr<Variable> value();
Variable** rawValue(ScopeManager* scopeManager);


// assignment
Variable** leftVar = lhs.rawValue(scopeManager);
std::unique_ptr<Variable> rightVar = rhs.value();
*leftVar = std::move(rightVar);

// variable expression
Variable** rawValue(ScopeManager* scopeManager) {
    return scopeManager->getVariableLocation(this->identifier);
}

// vector index expression
Variable** rawValue(ScopeManager* scopeManager) {
    Variable** innerVariable = 
        innerExpression->rawValue(scopeManager);
    if(innerVariable.type != VECTOR)
        error();
    
    VectorVariable* innerVectorVariable = 
        dynamic_cast<VectorVariable*>(*innerVariable);
    

    // unsigned int index = (unsigned int)indexExpression.value();
    unsigned int index = 1; // placeholder
    
    return &innerVectorVariable->values[index].get();
}

// post expression
std::unique_ptr<Variable> value(ScopeManager* scopeManager) {
    if(dynamic_cast<PostExpression>(innerExpression.get()))
        error("Nested post expressions not allowed");

    Variable** innerVariable = 
        innerExpression->rawValue(scopeManager);
    if(innerVariable.type != INT && innerVariable.type != FLOAT)
        error();

    std::unique_ptr<Variable> copy = copyVariable(*innerVariable);

    // only int here for simplicity
    SimpleVariable* simpleVariable = 
        dynamic_cast<SimpleVariable*>(*innerVariable);
    
    simpleVariable->value = std::get<int>(simpleVariable->value)++;

    return std::move(copy);
}

// unary expression
Variable** rawValue(ScopeManager* scopeManager) {

    Variable** innerVariable = 
        innerExpression->rawValue(scopeManager);
    if(innerVariable.type != INT && innerVariable.type != FLOAT)
        error();

    
    // only int here for simplicity
    SimpleVariable* simpleVariable = 
        dynamic_cast<SimpleVariable*>(*innerVariable);
    
    simpleVariable->value = std::get<int>(simpleVariable->value)++;

    return innerVariable;
}

std::unique_ptr<Variable> value(ScopeManager* scopeManager) {
    return copyVariable(*rawValue(scopeManager));
}
